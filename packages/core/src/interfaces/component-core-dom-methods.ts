// The component dom methods

interface ComponentCoreDomMethods {
  addEventListener: HTMLElement["addEventListener"];
  after: HTMLElement["after"];
  animate: HTMLElement["animate"];
  append: HTMLElement["append"];
  appendChild: HTMLElement["appendChild"];
  attachInternals: HTMLElement["attachInternals"];
  attachShadow: HTMLElement["attachShadow"];
  before: HTMLElement["before"];
  blur: HTMLElement["blur"];
  checkVisibility: HTMLElement["checkVisibility"];
  click: HTMLElement["click"];
  cloneNode: HTMLElement["cloneNode"];
  closest: HTMLElement["closest"];
  compareDocumentPosition: HTMLElement["compareDocumentPosition"];
  computedStyleMap: HTMLElement["computedStyleMap"];
  contains: HTMLElement["contains"];
  dispatchEvent: HTMLElement["dispatchEvent"];
  focus: HTMLElement["focus"];
  getAnimations: HTMLElement["getAnimations"];
  getAttribute: HTMLElement["getAttribute"];
  getAttributeNS: HTMLElement["getAttributeNS"];
  getAttributeNames: HTMLElement["getAttributeNames"];
  getAttributeNode: HTMLElement["getAttributeNode"];
  getAttributeNodeNS: HTMLElement["getAttributeNodeNS"];
  getBoundingClientRect: HTMLElement["getBoundingClientRect"];
  getClientRects: HTMLElement["getClientRects"];
  getElementsByClassName: HTMLElement["getElementsByClassName"];
  getElementsByTagNameNS: HTMLElement["getElementsByTagNameNS"];
  getRootNode: HTMLElement["getRootNode"];
  setAttribute: HTMLElement["setAttribute"];
  setAttributeNS: HTMLElement["setAttributeNS"];
  setAttributeNode: HTMLElement["setAttributeNode"];
  setAttributeNodeNS: HTMLElement["setAttributeNodeNS"];
  setHTMLUnsafe: HTMLElement["setHTMLUnsafe"];
  setPointerCapture: HTMLElement["setPointerCapture"];
  toggleAttribute: HTMLElement["toggleAttribute"];
  togglePopover: HTMLElement["togglePopover"];
  hidePopover: HTMLElement["hidePopover"];
  hasAttribute: HTMLElement["hasAttribute"];
  hasAttributeNS: HTMLElement["hasAttributeNS"];
  hasAttributes: HTMLElement["hasAttributes"];
  hasChildNodes: HTMLElement["hasChildNodes"];
  hasPointerCapture: HTMLElement["hasPointerCapture"];
  querySelector: HTMLElement["querySelector"];
  querySelectorAll: HTMLElement["querySelectorAll"];
  insertAdjacentElement: HTMLElement["insertAdjacentElement"];
  insertAdjacentHTML: HTMLElement["insertAdjacentHTML"];
  insertAdjacentText: HTMLElement["insertAdjacentText"];
  insertBefore: HTMLElement["insertBefore"];
  isDefaultNamespace: HTMLElement["isDefaultNamespace"];
  isEqualNode: HTMLElement["isEqualNode"];
  isSameNode: HTMLElement["isSameNode"];
  lookupNamespaceURI: HTMLElement["lookupNamespaceURI"];
  lookupPrefix: HTMLElement["lookupPrefix"];
  remove: HTMLElement["remove"];
  removeAttribute: HTMLElement["removeAttribute"];
  removeAttributeNS: HTMLElement["removeAttributeNS"];
  removeAttributeNode: HTMLElement["removeAttributeNode"];
  removeChild: HTMLElement["removeChild"];
  removeEventListener: HTMLElement["removeEventListener"];
  replaceChild: HTMLElement["replaceChild"];
  replaceChildren: HTMLElement["replaceChildren"];
  replaceWith: HTMLElement["replaceWith"];
  requestFullscreen: HTMLElement["requestFullscreen"];
  requestPointerLock: HTMLElement["requestPointerLock"];
  scroll: HTMLElement["scroll"];
  scrollBy: HTMLElement["scrollBy"];
  scrollIntoView: HTMLElement["scrollIntoView"];
  scrollTo: HTMLElement["scrollTo"];
  matches: HTMLElement["matches"];
  prepend: HTMLElement["prepend"];
  normalize: HTMLElement["normalize"];
}

export type { ComponentCoreDomMethods };
